# -*- coding: utf-8 -*-
"""mask-project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16rW9MwhWNFMRmCNkrn7raMCcRvvQ936d
"""

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input
from tensorflow.keras import layers
from tensorflow.keras.applications.mobilenet_v2 import preprocess_input
from tensorflow.keras.preprocessing.image import img_to_array
from tensorflow.keras.preprocessing.image import load_img
from tensorflow.keras.utils import to_categorical
from sklearn.preprocessing import LabelBinarizer
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from imutils import paths
import matplotlib.pyplot as plt
import numpy as np
from sklearn.datasets import load_files
import os

os.environ['KAGGLE_USERNAME'] = //your_kaggle_username
os.environ['KAGGLE_KEY']= //your_kaggle_api-key

!kaggle datasets download -d ashishjangra27/face-mask-12k-images-dataset

!unzip -q '/content/face-mask-12k-images-dataset.zip' -d .

train_dir = "/content/Face Mask Dataset/Train"
valid_dir = "/content/Face Mask Dataset/Validation"
test_dir = "/content/Face Mask Dataset/Test"

train_for_gen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=10,
    zoom_range=0.2,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    horizontal_flip=True,
    samplewise_center = True,
    samplewise_std_normalization = True)
valid_for_gen = ImageDataGenerator(
    rescale=1./255
)

train_generator = train_for_gen.flow_from_directory(
    train_dir,
    target_size =(224,224),
    batch_size = 64,
    class_mode = 'binary',
    color_mode = 'rgb',
    shuffle=True
)

validation_generator = valid_for_gen.flow_from_directory(
    valid_dir,
    target_size = (224,224),
    batch_size = 64,
    class_mode = 'binary',
    color_mode = 'rgb',
    shuffle=False,
)

mobilenet = MobileNetV2(input_shape = (224, 224, 3), include_top = False)
for layer in mobilenet.layers:
    layer.trainable = False
    
mobilenet.summary()

X = layers.AveragePooling2D(pool_size=(7, 7))(mobilenet.output)
X = layers.Flatten(name="flatten")(X)
X = layers.Dense(128, activation="relu")(X)
X = layers.Dropout(0.5)(X)
prediction = layers.Dense(1, activation= 'sigmoid')(X)
model = Model(inputs = mobilenet.input, outputs = prediction)
model.summary()

opt = tf.keras.optimizers.Adam(lr=1e-4, decay=1e-4 / 20)
model.compile(loss="binary_crossentropy", optimizer=opt,
	metrics=["accuracy"])

history = model.fit(train_generator, batch_size=64, epochs=20,
              validation_data=validation_generator, verbose=1)

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model Accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epochs')
plt.legend(['accuracy', 'val_accuracy','loss', 'val_loss'])
plt.show()

model.save("masker_detector.model", save_format="h5")

test_generator = ImageDataGenerator(
    rescale=1./255
)

sample_test = test_generator.flow_from_directory(
    test_dir,
    target_size = (224,224))

samples = sample_test.next()
predictions = np.squeeze(model.predict(samples[0]) >= 0.5).astype(np.int)
labels = samples[1].astype(np.int)

for i in range(25):
    plt.subplot(5, 5, i + 1)
    plt.imshow(samples[0][i])
    plt.axis('off')
    plt.title(("NO MASK" if predictions[i] == 1 else "MASK"))
    plt.show()

tf.saved_model.save(model, '/content/saved_model')

!pip install tensorflowjs

import tensorflowjs as tfjs

tfjs.converters.save_keras_model(model, '/content/converter')

model_load = tf.keras.models.load_model('/content/masker_detector.model')
model_load.summary()

model_load.evaluate(validation_generator)

!zip -r /content/converter.zip /content/converter

!zip -r /content/saved_model.zip /content/saved_model